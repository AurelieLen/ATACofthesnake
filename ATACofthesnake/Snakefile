import os
import yaml

with open('Parameters.yaml') as f:
	paramDic = yaml.load(f, Loader=yaml.FullLoader)
Conditions = list(paramDic['Cond'])

localrules: checkindex, fragSize, BigWigs
rule all:
	input:
		expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam.bai'), sample=paramDic['Samples']),
		"deepTools/fragSizes.raw.tsv",
		"mergeBams/Merged.bam",
		'MACS2/Merged_peaks.narrowPeak',
		"diffAcc/counts.mat",
		"diffAcc/scalefactors.txt"
		#expand("BigWigs/{sample}.bw", sample=paramDic['Samples'])

rule checkIndex:
	input:
		'{sample}.bam'
	output:
		'{sample}.bam.bai'
	threads: 10
	shell:'''
	sambamba index -t {threads} {input}
	'''

rule fragSize:
	input:
		expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam.bai'), sample=paramDic['Samples'])
	output:
		"deepTools/fragSizes.raw.tsv"
	params:
		' '.join(expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam'), sample=paramDic['Samples']))
	threads: 10
	shell:'''
	echo {params}
	bamPEFragmentSize -b {params} -p {threads} --outRawFragmentLengths {output} 2> deepTools/fragSizes.err > deepTools/fragSizes.out
	'''
rule mergeBams:
	input:
		expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam.bai'), sample=paramDic['Samples'])
	output:
		"mergeBams/Merged.bam"
	params:
		' '.join(expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam'), sample=paramDic['Samples']))
	threads: 10
	shell:'''
	sambamba merge -t {threads} {output} {params}
	'''

rule MACS2:
	input:
		"mergeBams/Merged.bam"
	output:
		"MACS2/Merged_peaks.narrowPeak"
	params:
		genomeSize = paramDic['genomeSize'],
		outName = "Merged"
	threads: 1
	shell:'''
	macs2 callpeak -t {input} -f BAMPE --nomodel --nolambda -g {params.genomeSize} -n {params.outName} -p 0.01 --outdir MACS2/ --keep-dup all --call-summits 2> MACS2/{params.outName}.log
	'''

rule countMat:
	input:
		"MACS2/Merged_peaks.narrowPeak"
	output:
		mat = "diffAcc/counts.mat",
		matnpz = "diffAcc/counts.npz"
	params:
		blackList = paramDic['blackList'],
		samples = ' '.join(expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam'), sample=paramDic['Samples']))
	threads: 20
	shell:'''
	multiBamSummary BED-file --BED {input} -bl {params.blackList} -p {threads} --outRawCounts {output.mat} -o {output.matnpz} -b {params.samples}
	sed -i "s/'//g" diffAcc/counts.mat
	'''

rule scaleFactors:
	input:
		"diffAcc/counts.mat"
	output:
		"diffAcc/scalefactors.txt"
	threads: 1
	params:
		scriptLoc = os.path.join(paramDic["baseDir"], "Rscripts", "edgeR_scalefactors.R")
	shell:'''
	Rscript {params.scriptLoc} {input}
	'''

rule BigWigs:
	input:
		os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam')
	output:
		"BigWigs/{sample}.bw"
	params:
		blackList = paramDic['blackList'],
		genomeSize = paramDic['genomeSize']
	threads: 10
	shell:'''
	bamCoverage -b {input} -o {output} -p {threads} -bs 25 --extendReads --ignoreDuplicates --effectiveGenomeSize {params.genomeSize} -bl {params.blackList} --normalizeUsing 
	'''