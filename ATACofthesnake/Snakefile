import os
import yaml
from ATACofthesnake import misc

# Read / set variables.
with open('Parameters.yaml') as f:
	paramDic = yaml.load(f, Loader=yaml.FullLoader)
Conditions = list(paramDic['Cond'])

rule all:
	input:
		expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam.bai'), sample=paramDic['Samples']),
		expand("deepTools/{Comp}.fragSizes.raw.tsv", Comp=paramDic['Comp']),
		expand("mergeBams/{Comp}.Merged.bam", Comp=paramDic['Comp']),
		expand('MACS2/{Comp}_Merged_peaks.narrowPeak', Comp=paramDic['Comp']),
		expand("diffAcc_{Comp}/{Comp}_counts.mat", Comp=paramDic['Comp']),
		expand("diffAcc_{Comp}/{Comp}_scaleFactors.txt", Comp=paramDic['Comp']),
		expand("BigWigs/{sample}.bw", sample=paramDic['Samples']),
		expand('deepTools/{Comp}_BigwigSum.npz', Comp=paramDic['Comp'])
		#'Figures/plotCorr.png',
		#"Figures/PCA.png",
		#"deepTools/BigwigMatrix.gz",
		#"Figures/Heatmap.png",
		#"diffAcc/DESeq2.tsv"

rule checkIndex:
	input:
		'{sample}.bam'
	output:
		'{sample}.bam.bai'
	threads: 10
	shell:'''
	sambamba index -t {threads} {input}
	'''

rule fragSize:
	input:
		expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam.bai'), sample=paramDic['Samples'])
	output:
		"deepTools/{Comp}.fragSizes.raw.tsv"
	params:
		lambda wildcards: ' '.join(expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam'), sample=paramDic['Comp'][wildcards.Comp]['Samples']))
	threads: 10
	shell:'''
	bamPEFragmentSize -b {params} -p {threads} --outRawFragmentLengths {output} 2> deepTools/fragSizes.err > deepTools/fragSizes.out
	'''

rule mergeBams:
	input:
		expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam.bai'), sample=paramDic['Samples'])
	output:
		"mergeBams/{Comp}.Merged.bam"
	params:
		lambda wildcards: ' '.join(expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam'), sample=paramDic['Comp'][wildcards.Comp]['Samples']))
	threads: 10
	shell:'''
	sambamba merge -t {threads} {output} {params}
	'''

rule MACS2:
	input:
		"mergeBams/{Comp}.Merged.bam"
	output:
		"MACS2/{Comp}_Merged_peaks.narrowPeak"
	params:
		genomeSize = paramDic['genomeSize'],
		outName = lambda wildcards: wildcards.Comp + "_Merged"
	threads: 1
	shell:'''
	macs2 callpeak -t {input} -f BAMPE --nomodel --nolambda -g {params.genomeSize} -n {params.outName} -p 0.01 --outdir MACS2/ --keep-dup all 2> MACS2/{params.outName}.log
	'''

rule countMat:
	input:
		"MACS2/{Comp}_Merged_peaks.narrowPeak"
	output:
		mat = "diffAcc_{Comp}/{Comp}_counts.mat",
		matnpz = "diffAcc_{Comp}/{Comp}_counts.npz"
	params:
		blackList = paramDic['blackList'],
		samples = lambda wildcards: ' '.join(expand(os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam'), sample=paramDic['Comp'][wildcards.Comp]['Samples']))
	threads: 20
	shell:'''
	multiBamSummary BED-file --BED {input} -bl {params.blackList} -p {threads} --outRawCounts {output.mat} -o {output.matnpz} -b {params.samples}
	# Remove quotes placed by multiBamSummary
	sed -i "s/'//g" {output.mat}
	# Remove .bam postfix
	sed -i 's/\.bam//g' {output.mat}
	'''

rule scaleFactors:
	input:
		"diffAcc_{Comp}/{Comp}_counts.mat"
	output:
		"diffAcc_{Comp}/{Comp}_scaleFactors.txt"
	threads: 1
	params:
		scriptLoc = os.path.join(paramDic["baseDir"], "Rscripts", "edgeR_scalefactors.R")
	shell:'''
	Rscript {params.scriptLoc} {input} {output}
	'''

rule BigWigs:
	input:
		sf = expand("diffAcc_{Comp}/{Comp}_scaleFactors.txt",Comp=paramDic['Comp']),
		inFile = os.path.join(paramDic['Loc']['bamDir'], '{sample}.bam')
	output:
		"BigWigs/{sample}.bw"
	params:
		sampleName = '{sample}',
		blackList = paramDic['blackList'],
		genomeSize = paramDic['genomeSize']
	threads: 10
	shell:'''
	SCALEFAC=$(grep {params.sampleName} {input.sf} | cut -f2 -d ' ')
	bamCoverage --scaleFactor $SCALEFAC -b {input.inFile} -o {output} -p {threads} -bs 25 --extendReads --ignoreDuplicates --effectiveGenomeSize {params.genomeSize} -bl {params.blackList}
	'''

rule multiBigwigSum:
	input:
		expand('BigWigs/{sample}.bw', sample=paramDic['Samples']),
		Peaks = "MACS2/{Comp}_Merged_peaks.narrowPeak"
	output:
		'deepTools/{Comp}_BigwigSum.npz'
	params:
		bigwigs = lambda wildcards: ' '.join(expand('BigWigs/{sample}.bw', sample=paramDic['Comp'][wildcards.Comp]['Samples'])),
		blackList = paramDic['blackList']
	threads: 10
	shell:'''
	multiBigwigSummary BED-file --BED {input.Peaks} -o {output} -b {params.bigwigs} -bl {params.blackList} -p {threads} -bs 150
	'''

rule plotCorr:
	input:
		"deepTools/BigwigSum.npz"
	output:
		"Figures/plotCorr.png"
	shell:'''
	plotCorrelation --corData {input} --corMethod pearson --whatToPlot heatmap --plotFile {output} --skipZeros -min 0.8 -max 1
	'''

rule plotPCA:
	input:
		"deepTools/BigwigSum.npz"
	output:
		"Figures/PCA.png"
	threads: 1
	shell:'''
	plotPCA --corData {input} -o {output} --transpose
	'''

rule computeMatrix:
	input:
		expand('BigWigs/{sample}.bw', sample=paramDic['Samples']),
	output:
		"deepTools/BigwigMatrix.gz"
	params:
		bigwigs = ' '.join(expand('BigWigs/{sample}.bw', sample=paramDic['Samples'])),
		bed = "TSS.bed"
	threads: 10
	shell:'''
	computeMatrix reference-point -S {params.bigwigs} -R {params.bed} --referencePoint center -a 2000 -b 2000 -out {output} -p {threads} --missingDataAsZero
	'''

rule plotHeatmap:
	input:
		"deepTools/BigwigMatrix.gz"
	output:
		"Figures/Heatmap.png"
	threads: 1
	shell:'''
	plotHeatmap -m {input} -out {output} --refPointLabel TSS
	'''

rule DESeq2:
	input:
		"diffAcc/counts.mat"
	output:
		"diffAcc/DESeq2.tsv"
	params:
		scriptLoc = os.path.join(paramDic["baseDir"], "Rscripts", "DESeq2.R"),
		condOrder = lambda wildcards, input: misc.conditionsfromCount(str(input) ,paramDic['Cond'])
	threads: 1
	shell:'''
	Rscript {params.scriptLoc} {input} {params.condOrder}
	'''