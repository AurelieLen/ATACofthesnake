#!/usr/bin/env python3
import argparse
from rich import print
from rich.console import Console
import sys
import subprocess
from ATACofthesnake import misc
import yaml
import os
import snakemake

class NoAliasDumper(yaml.Dumper):
    def ignore_aliases(self, data):
        return True

def main():
    console = Console()
    parser = argparse.ArgumentParser(description='ATACseq analysis starting from bam files.')
    parser.add_argument('--bamDir', type=str, required=True,
                        help='Provide the directory containing bam files.')
    parser.add_argument('--outDir', type=str, required=False, default='AOS',
                        help='Specify output directory.')
    parser.add_argument('--sampleSheet', type=str, required=True,
                        help='Provide a sampleSheet, tsv seperated, with headers [Sample, Cond, Comp, Batch]. Comp is a string grouping 2 conditions (e.g. 1 DE analysis per Comp).')
    parser.add_argument('--blackList', type=str, required=True,
                        help='Provide a blacklist file containing genomic regions to ignore (BED format)')
    parser.add_argument('--genes', type=str, required=True,
                        help='Provide a GTF file containing genome annotations.')
    parser.add_argument('--genomeSize', type=float, required=True,
                        help='Provide genome size. e.g. 1.87e9 for mouse.')
    parser.add_argument('--clusterCMD', type=str, required=False,
                        help='Cluster submission command, defaults to SlurmEasy')
    parser.add_argument('--genomeFasta', type=str, required=True,
                        help='Provide genome fasta file.')
    parser.add_argument('--dryRun', action='store_true', required=False,
                        help='dryRun snakemake.')
    parser.add_argument('--condaPrefix', required=True,
                        help='Specify your conda installation location. e.g. /localenv/user/anaconda/miniconda3')
    parser.add_argument('--downStream', action='store_true', required=False,
                        help='Specify if you want downstream analysis (e.g. diffpeak heatmap, motif enrichment, ...).')
    parser.add_argument('--fragSizeMax', type=int, default=150,
                        help='Specify fragment size cut-off (default = 150).')
    parser.add_argument('--motifs', type=str, required=True,
                        help='Specify a motif file (meme format) to search for in diff. peaks.')
    parser.add_argument('--mergeBam', action='store_true', required=False,
                        help='Flag if you want to merge bam files per condition before peak calling (default is peak merging per replicate).')
    
    args = parser.parse_args()

    print("bamDIR: {}".format(args.bamDir))

    # Grab bamfiles:
    bamFiles = misc.readBamDir(args.bamDir)
    if not bamFiles:
        print("No bamfiles found. Are you sure your bamfiles sit where they need to?")
        sys.exit()
    if bamFiles == None:
        print("Directory exists, but there is a mismatch between files and sampleSheet.")
        sys.exit()
    # Parse Samplesheet.
    paramDic, batchStatus = misc.setdefault_readss(args.sampleSheet, bamFiles)
    print(paramDic)
    # Files existings.
    paramDic['mergeBam'] = 1 if args.mergeBam else 0
    paramDic['batchStatus'] = batchStatus
    paramDic['Invocation'] = " ".join(sys.argv)
    paramDic['Loc'] = {"bamDir": str(os.path.abspath(args.bamDir)), "outDir": args.outDir}
    paramDic['blackList'] = os.path.abspath(args.blackList)
    paramDic['GTF'] = os.path.abspath(args.genes)
    paramDic['genomeSize'] = args.genomeSize
    paramDic['genomeFa'] = os.path.abspath(args.genomeFasta)
    paramDic['fragSize'] = args.fragSizeMax
    paramDic['motifLoc'] = os.path.abspath(args.motifs)

    if not os.path.exists(args.blackList):
        print("blacklist file not found. Exiting.")
        sys.exit()
    if not os.path.exists(args.genes):
        print("Genes not found. Exiting.")
        sys.exit()
    if not os.path.exists(args.genomeFasta):
        print("genomeFasta not found. Exiting.")
        sys.exit()
    if args.downStream and not args.motifs:
        print("Downstream invoked but no motifs specified")
    if args.downStream and args.motifs:
        print("Downstream invoked.")
        if not os.path.exists(args.motifs):
            print("Motifs not found. Exiting.")
            sys.exit()
    with open('Parameters.yaml', 'w') as f:
        yaml.dump(paramDic, f, sort_keys=False)
    print("Parameters written out in yaml file.")
    if not os.path.exists("genes.sort.gtf"):
        print("Sorting GTF for Uropa later on.")
        misc.sortGTF(args.genes)
    else:
        print("Found a sorted GTF file. Moving on..")
    if not os.path.isfile("TSS.bed"):
        print("Did not find TSS file, launching extraction.")
        misc.GTFtoTSS("genes.sort.gtf")
    else:
        print("Found TSS.bed. Moving on..")
    console.print("So far so good, launching snakemake instances :smiley:")

    # Launch snakemake
    if args.clusterCMD:
        clusterCMD = args.clusterCMD
    else:
        clusterCMD = "SlurmEasy -t {threads} -l AOS/cluster_logs -n {rule}"
    with console.status("[bold green] Running snakemake..."):
        if not args.dryRun:
            diffStatus = snakemake.snakemake(os.path.join(paramDic["baseDir"], 'diffAcc.smk'),
            cores=10, nodes=5, latency_wait=300, max_jobs_per_second=1, cluster=clusterCMD,
            max_status_checks_per_second=1, use_conda=True, conda_prefix=args.condaPrefix)
        else:
            diffStatus = snakemake.snakemake(os.path.join(paramDic["baseDir"], 'diffAcc.smk'),
            cores=10, nodes=5, latency_wait=300, max_jobs_per_second=1, cluster=clusterCMD,
            max_status_checks_per_second=1, use_conda=True, conda_prefix=args.condaPrefix, dryrun=True)
    if diffStatus == True:
        print("diffAnalysis completed succesfully.")
    else:
        print("Error in diffAnalysis!")
    if args.downStream and not args.dryRun and diffStatus == True:
        print("Starting up with downstream analysis.")
        print("Parsing the comparisons and including those with at least 10 up- and down regulated regions...")
        paramDic_diff = misc.checkNumDiff(paramDic)
        if 'diffComp' in paramDic_diff:
            with open('Parameters_downstream.yaml', 'w') as f:
                yaml.dump(paramDic_diff, f, sort_keys=False, Dumper=NoAliasDumper)
            print("Launching snakemake")
            with console.status("[bold green] Running snakemake for downstream analysis..."):
                downStatus = snakemake.snakemake(os.path.join(paramDic["baseDir"], 'diffDownstream.smk'),
                cores=10, nodes=5, latency_wait=300, max_jobs_per_second=1, cluster=clusterCMD,
                max_status_checks_per_second=1, use_conda=True, conda_prefix=args.condaPrefix)
            if downStatus == True:
                print("downstream analysis completed succesfully.")
        else:
            print("Not enough differential regions. Stopping.")
    else:
        print("Dryrun invoked or diff. analysis didn't complete succesfully. Stopping.")
    
    ## Compile pdf.
    #misc.createTexfromTemplate(os.path.join(paramDic["baseDir"], 'template.tex'), paramDic)

if __name__ == "__main__":
    main()
