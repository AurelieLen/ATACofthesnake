#!/usr/bin/env python3
import argparse
from rich import print
from rich.console import Console
import sys
import subprocess
from ATACofthesnake import misc
import yaml
import os
import snakemake

def main():
    console = Console()
    parser = argparse.ArgumentParser(description='ATACseq analysis starting from bam files.')
    parser.add_argument('--bamDir', type=str, required=True,
                        help='Provide the directory containing bam files.')
    parser.add_argument('--outDir', type=str, required=True,
                        help='Provide a name for the output directory.')                    
    parser.add_argument('--sampleSheet', type=str, required=True,
                        help='Provide a sampleSheet, tsv seperated, with headers [Sample, Cond, Comp]. Comp is a string grouping 2 conditions (e.g. 1 DE analysis per Comp).')
    parser.add_argument('--blackList', type=str, required=True,
                        help='Provide a blacklist file containing genomic regions to ignore (BED format)')
    parser.add_argument('--Genes', type=str, required=True,
                        help='Provide a GTF file containing genome annotations.')
    parser.add_argument('--genomeSize', type=int, required=True,
                        help='Provide genome size. e.g. 2652783500 for mouse.')
    parser.add_argument('--clusterCMD', type=str, required=False,
                        help='Cluster submission command, defaults to SlurmEasy')
    args = parser.parse_args()

    print("bamDIR: {}".format(args.bamDir))
    print("outDIR: {}".format(args.outDir))

    # Grab bamfiles:
    bamFiles = misc.readBamDir(args.bamDir)
    if not bamFiles:
        print("No bamfiles found. Are you sure your bamfiles sit where they need to?")
        sys.exit()

    # Parse Samplesheet.
    paramDic = misc.setdefault_readss(args.sampleSheet, bamFiles)
    paramDic['Loc'] = {"bamDir":str(os.path.abspath(args.bamDir)), "outDir":str(os.path.abspath(args.outDir))}
    paramDic['blackList'] = os.path.abspath(args.blackList)
    paramDic['GTF'] = os.path.abspath(args.Genes)
    paramDic['genomeSize'] = args.genomeSize
    with open('Parameters.yaml', 'w') as f:
        yaml.dump(paramDic, f)
    print("Parameters written out in yaml file.")
    if not os.path.isfile("TSS.bed"):
        print("Did not find TSS file, launching extraction.")
        misc.GTFtoTSS(args.Genes)
    console.print("So far so good, launching snakemake instances :smiley:")

    # Launch snakemake
    if args.clusterCMD:
        clusterCMD = args.clusterCMD
    else:
        clusterCMD = "SlurmEasy -t {threads} -n {rule}"
    #snakemake.snakemake(os.path.join(paramDic["baseDir"], 'Snakefile'),
    # nodes=5, latency_wait=300, cluster=clusterCMD, max_jobs_per_second=1, 
    # max_status_checks_per_second=1)
    snakemake.snakemake(os.path.join(paramDic["baseDir"], 'Snakefile'), cores=10, latency_wait=300)
    if not os.path.exists("cluster_logs"):
        os.mkdir("cluster_logs")
    for error in os.listdir():
        if ".err" in error:
            os.rename(error, "cluster_logs/" + error)
    for out in os.listdir():
        if ".out" in out:
            os.rename(out, "cluster_logs/" + out)

if __name__ == "__main__":
    main()